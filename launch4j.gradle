/**
 * CMD ADAPTER - Command Line Task Driver
 *
 *  Copyright 2016 by Chad Juliano
 *
 *  Licensed under GNU Lesser General Public License v3.0 only.
 *  Some rights reserved. See LICENSE.
 *
 * @license LGPL-3.0 <http://spdx.org/licenses/LGPL-3.0>
 */

buildscript {
	repositories {
	    jcenter()
	}

	dependencies {
		classpath group: 'edu.sc.seis.gradle', name: 'launch4j', version: '2.3.0'
		classpath group: 'net.nemerosa', name: 'versioning', version: '2.5.1'
	}
}

// The application plugin adds a set of tasks for script generation and distribution
// https://docs.gradle.org/current/userguide/application_plugin.html
apply plugin: 'application'

// plugin to build the launch4j executable.
apply plugin: edu.sc.seis.launch4j.Launch4jPlugin

// For the versioning plugin to work the root project must contain a .git directory.
apply plugin: net.nemerosa.versioning.VersioningPlugin

// JAR pluigin
// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
jar {
	Date buildTimeAndDate = new Date()
    def buildDate = new java.text.SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    def buildTime = new java.text.SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    def buildJVM = String.format('%s (%s %s)',
    	System.properties['java.version'],
    	System.properties['java.vendor'],
    	System.properties['java.vm.version'])
    def buildUser = System.properties['user.name']

    excludes = [ 'logback.xml' ]

    manifest {
        attributes (
            'Built-By': buildUser,
            'Created-By': buildJVM,
            'Build-Date': buildDate,
            'Build-Time': buildTime,
            'Build-Revision': versioning.info.commit,
            'Specification-Title': project.description,
            'Specification-Version': project.version,
            'Implementation-Title': project.programName,
            'Implementation-Version': project.version,
            'Main-Class': project.mainClassName )
    }

	doFirst { manifest.attributes.sort().each { println "MANIFEST: ${it}" } }
}

// launch4j plugin
// https://github.com/TheBoegl/gradle-launch4j
task createLaunch4j(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
    group = 'launch4j'
    description = "Create the ${outfile} launcher."

    outfile = "${project.programName}.exe"
    mainClassName = project.mainClassName
    fileDescription = project.description
    icon = "${projectDir}/${project.programIcon}"
    headerType = 'console'
    copyright = project.copyright
    dontWrapJar = true
    textVersion = project.version
}

//createLaunch4j {
//  copyConfigurable = project.copySpec {
//      from configurations.runtime.files
//      from project.jar.outputs.files
//  	from(project.eceServerDir) { include 'config/diameter/*.xml' }
//  }
//}

// required for the ant filter in copy
import org.apache.tools.ant.filters.LineContains

// added by the application plugin
// https://docs.gradle.org/current/userguide/application_plugin.html
// also see CopySpec
// https://docs.gradle.org/current/javadoc/org/gradle/api/file/CopySpec.html
startScripts {
	group = 'distribution'
	description = "Create the ${project.programName} launch scripts."

	outputDir = new File(project.buildDir, 'scripts')
	mainClassName = project.mainClassName
	applicationName = project.programName
	classpath = files(configurations.runtime, jar.outputs)

	doLast {
		copy {
            from outputDir
            into outputDir

            // the new file should have the *.sh extension
            include project.programName
        	rename project.programName, "${project.programName}.sh"

            // we need to remove this line to make the script work:
            //     cd "`dirname \"$PRG\"`/.." >/dev/null
            filter(LineContains, contains:['dirname \\"$PRG\\"`/.."'], negate:'true')
		}
	}
}

// from the distributino plugin. Add some files to the 'top' distribution.
// https://docs.gradle.org/current/userguide/distribution_plugin.html
distributions {
    top {
    	contents {
            from(createLaunch4j.outputs) {  include '*.exe' }
            from(startScripts.outputs) {
            	include '*.sh'
            	fileMode 0755
            }
        }

        contents.eachFile() { file -> println "DIST: ${file.path}" }
    }
}

/**
 * stuff below is just for debugging
 */
task helpLaunch4j {
	group = 'launch4j'
	description = 'List some details of createLaunch4j'

	doLast {
		//createLaunch4j.properties.sort().each { println "properties: ${it}" }
		configurations.runtime.sort().each { println "orig: ${it}" }

		def outputDir = createLaunch4j.outputDirectory.toPath()
		println "outputDir: ${outputDir}"

		def libraryDir = createLaunch4j.libraryDirectory.toString()
		println "libraryDirectory: ${libraryDir}"

		def outFilePath = createLaunch4j.dest.parentFile.toPath()
		println "outFilePath: ${outFilePath}"

		FileCollection _copyLibraries = createLaunch4j.copyLibraries()
		_copyLibraries.each { println "copyLibraries: ${it}" }
	}
}

task listClasspath {
	group = 'help'
	description = 'List the runtime classpaths.'

	doLast {
		sourceSets.main.resources.collect{ relativePath(it) }.sort().each { println "resource: ${it}" }
		configurations.runtime.collect{ relativePath(it) }.sort().each { println "classpath: ${it}" }
	}
}
